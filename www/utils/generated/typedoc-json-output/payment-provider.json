{
	"id": 13332,
	"name": "payment-provider",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 13336,
			"name": "AbstractPaymentProvider",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isAbstract": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "## Overview\n\nA payment provider is used to handle and process payments, such as authorizing, capturing, and refund payments.\n\nRefer to [this guide](https://docs.medusajs.com/experimental/payment/payment-provider/) to learn more about payment providers.\n\nRefer to [this guide](https://docs.medusajs.com/experimental/payment/payment-flow/) to learn more about the payment flow.\n\n---\n\n## How to Create a Payment Provider\n\nA payment provider is a TypeScript or JavaScript class that extends the "
					},
					{
						"kind": "code",
						"text": "`AbstractPaymentProvider`"
					},
					{
						"kind": "text",
						"text": " class imported from "
					},
					{
						"kind": "code",
						"text": "`@medusajsa/utils`"
					},
					{
						"kind": "text",
						"text": ".\n\nYou can create the payment provider in a module or plugin, then pass that module/plugin in the Payment Module's "
					},
					{
						"kind": "code",
						"text": "`providers`"
					},
					{
						"kind": "text",
						"text": " option. You can also pass the path to the file\nthat defines the provider if it's created in the Medusa application's codebase.\n\nFor example:\n\n"
					},
					{
						"kind": "code",
						"text": "```ts\nabstract class MyPayment extends AbstractPaymentProvider<MyConfigurations> {\n  // ...\n}\n```"
					},
					{
						"kind": "text",
						"text": "\n\n---\n\n## Configuration Type Parameter\n\nThe "
					},
					{
						"kind": "code",
						"text": "`AbstractPaymentProvider`"
					},
					{
						"kind": "text",
						"text": " class accepts an optional type parameter that defines the type of configuration that your payment provider expects.\n\nFor example:\n\n"
					},
					{
						"kind": "code",
						"text": "```ts\ninterface MyConfigurations {\n  apiKey: string\n}\n\nabstract class MyPayment extends AbstractPaymentProvider<MyConfigurations> {\n  // ...\n}\n```"
					},
					{
						"kind": "text",
						"text": "\n\n---\n\n## Identifier Property\n\nThe "
					},
					{
						"kind": "code",
						"text": "`PaymentProvider`"
					},
					{
						"kind": "text",
						"text": " data model has 2 properties: "
					},
					{
						"kind": "code",
						"text": "`id`"
					},
					{
						"kind": "text",
						"text": " and "
					},
					{
						"kind": "code",
						"text": "`is_enabled`"
					},
					{
						"kind": "text",
						"text": ".\n\n"
					},
					{
						"kind": "code",
						"text": "```ts\nclass MyPaymentProvider extends AbstractPaymentProvider<MyConfigurations> {\n  static identifier = \"my-payment\"\n  // ...\n}\n```"
					},
					{
						"kind": "text",
						"text": "\n\n---\n\n## PROVIDER Property\n\nThe "
					},
					{
						"kind": "code",
						"text": "`PROVIDER`"
					},
					{
						"kind": "text",
						"text": " static property is used when registering the provider in the dependency container. Typically, it would have the\nsame value as the "
					},
					{
						"kind": "code",
						"text": "`identifier`"
					},
					{
						"kind": "text",
						"text": " property.\n\n"
					},
					{
						"kind": "code",
						"text": "```ts\nclass MyPaymentProvider extends AbstractPaymentProvider<MyConfigurations> {\n  static PROVIDER = \"my-payment\"\n  // ...\n}\n```"
					},
					{
						"kind": "text",
						"text": "\n\n---\n\n## PaymentProviderError\n\nBefore diving into the methods of the Payment Provider, you'll notice that part of the expected return signature of these method includes "
					},
					{
						"kind": "code",
						"text": "`PaymentProviderError`"
					},
					{
						"kind": "text",
						"text": ".\n\n"
					},
					{
						"kind": "code",
						"text": "```ts\ninterface PaymentProviderError {\n  error: string\n  code?: string\n  detail?: any\n}\n```"
					},
					{
						"kind": "text",
						"text": "\n\nWhile implementing the Payment Provider's methods, if you need to inform the Payment Module that an error occurred at a certain stage,\nreturn an object having the attributes defined in the "
					},
					{
						"kind": "code",
						"text": "`PaymentProviderError`"
					},
					{
						"kind": "text",
						"text": " interface.\n\nFor example, the Stripe payment provider has the following method to create the error object, which is used within other methods:\n\n"
					},
					{
						"kind": "code",
						"text": "```ts\nabstract class StripeBase extends AbstractPaymentProvider {\n  // ...\n  protected buildError(\n   message: string,\n   error: Stripe.StripeRawError | PaymentProviderError | Error\n ): PaymentProviderError {\n   return {\n     error: message,\n     code: \"code\" in error ? error.code : \"unknown\",\n     detail: isPaymentProviderError(error)\n       ? `${error.error}${EOL}${error.detail ?? \"\"}`\n       : \"detail\" in error\n       ? error.detail\n       : error.message ?? \"\",\n   }\n }\n\n  // used in other methods\n  async retrievePayment(\n    paymentSessionData: Record<string, unknown>\n  ): Promise<\n    PaymentProviderError |\n    PaymentProviderSessionResponse[\"session_data\"]\n  > {\n    try {\n      // ...\n    } catch (e) {\n      return this.buildError(\n        \"An error occurred in retrievePayment\",\n        e\n      )\n    }\n  }\n}\n```"
					}
				]
			},
			"children": [
				{
					"id": 13342,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {
						"isProtected": true
					},
					"signatures": [
						{
							"id": 13343,
							"name": "new AbstractPaymentProvider",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "You can use the "
									},
									{
										"kind": "code",
										"text": "`constructor`"
									},
									{
										"kind": "text",
										"text": " of your Payment Provider to have access to resources in your application through the [dependency container](https://docs.medusajs.com/development/fundamentals/dependency-injection).\n\nYou can also use the constructor to initialize your integration with the third-party provider. For example, if you use a client to connect to the third-party providerâ€™s APIs,\nyou can initialize it in the constructor and use it in other methods in the service.\n\nThe payment provider also can access the configurations of the module or plugin it's created in as a second parameter."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyPaymentProvider extends AbstractPaymentProvider<MyConfigurations> {\n  // ...\n  constructor(container, config) {\n    super(container, config)\n    // you can access options here\n\n    // you can also initialize a client that\n    // communicates with a third-party service.\n    this.client = new Client(options)\n  }\n  // ...\n}\n```"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"id": 13344,
									"name": "TConfig",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"default": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"parameters": [
								{
									"id": 13345,
									"name": "container",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An instance of "
											},
											{
												"kind": "code",
												"text": "`MedusaContainer`"
											},
											{
												"kind": "text",
												"text": " that allows you to access other resources in the [dependency container](https://docs.medusajs.com/development/fundamentals/dependency-injection)"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/common/medusa-container.ts",
											"qualifiedName": "MedusaContainer"
										},
										"name": "MedusaContainer",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 13346,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If this provider processor is created in a module or plugin, their options are passed in this parameter."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 13344,
										"name": "TConfig",
										"package": "@medusajs/utils",
										"qualifiedName": "AbstractPaymentProvider.TConfig",
										"refersToTypeParameter": true
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"target": 13336,
								"typeArguments": [
									{
										"type": "reference",
										"target": 13344,
										"name": "TConfig",
										"package": "@medusajs/utils",
										"qualifiedName": "AbstractPaymentProvider.TConfig",
										"refersToTypeParameter": true
									}
								],
								"name": "AbstractPaymentProvider",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 13347,
					"name": "container",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of "
							},
							{
								"kind": "code",
								"text": "`MedusaContainer`"
							},
							{
								"kind": "text",
								"text": " that allows you to access other resources in the [dependency container](https://docs.medusajs.com/development/fundamentals/dependency-injection)"
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../../packages/core/types/src/common/medusa-container.ts",
							"qualifiedName": "MedusaContainer"
						},
						"name": "MedusaContainer",
						"package": "@medusajs/types"
					}
				},
				{
					"id": 13348,
					"name": "config",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isProtected": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If this provider processor is created in a module or plugin, their options are passed in this parameter."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": 13344,
						"name": "TConfig",
						"package": "@medusajs/utils",
						"qualifiedName": "AbstractPaymentProvider.TConfig",
						"refersToTypeParameter": true
					},
					"defaultValue": "..."
				},
				{
					"id": 13341,
					"name": "identifier",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The "
							},
							{
								"kind": "code",
								"text": "`PaymentProvider`"
							},
							{
								"kind": "text",
								"text": " data model has 2 properties: "
							},
							{
								"kind": "code",
								"text": "`id`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`is_enabled`"
							},
							{
								"kind": "text",
								"text": ".\n\n"
							},
							{
								"kind": "code",
								"text": "```ts\nclass MyPaymentProvider extends AbstractPaymentProvider<MyConfigurations> {\n  static identifier = \"my-payment\"\n  // ...\n}\n```"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 13351,
					"name": "capturePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13352,
							"name": "capturePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is called when a payment should be captured. The payment is captured in one of the following scenarios:\n\n- The payment provider supports automatically capturing the payment after authorization.\n- The merchant requests to capture the payment after its associated payment session was authorized.\n- A webhook event occurred that instructs the payment provider to capture the payment session. Learn more about handing webhook events in [this guide](https://docs.medusajs.com/experimental/payment/webhook-events/)\n\nIn this method, you can interact with the third-party provider and perform any actions necessary to capture the payment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Either an error object or a value that's stored in the "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field of the payment."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13353,
									"name": "paymentSessionData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field of the payment."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.capturePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.capturePayment"
					}
				},
				{
					"id": 13354,
					"name": "authorizePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13355,
							"name": "authorizePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is called when a payment session should be authorized.\nYou can interact with a third-party provider and perform the necessary actions to authorize the payment.\n\nRefer to [this guide](https://docs.medusajs.com/experimental/payment/payment-flow/#3-authorize-payment-session)\nto learn more about how this fits into the payment flow and how to handle required actions."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The authorization details or an error object. If\nthe authorization details are returned, the "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`status`"
											},
											{
												"kind": "text",
												"text": " field are set in the associated payment session."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13356,
									"name": "paymentSessionData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field of the payment session."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 13357,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The context of the authorization."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 13358,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 13359,
															"name": "status",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../../../packages/core/types/src/payment/common.ts",
																	"qualifiedName": "PaymentSessionStatus"
																},
																"name": "PaymentSessionStatus",
																"package": "@medusajs/types"
															}
														},
														{
															"id": 13360,
															"name": "data",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																	"qualifiedName": "Record"
																},
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "unknown"
																	}
																],
																"name": "Record",
																"package": "typescript"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																13359,
																13360
															]
														}
													]
												}
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.authorizePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.authorizePayment"
					}
				},
				{
					"id": 13361,
					"name": "cancelPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13362,
							"name": "cancelPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is called when a payment is canceled.\n\nIn this method, you can interact with the third-party provider and perform any actions necessary to cancel the payment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Either an error object or a value that's stored in the "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field of the payment."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13363,
									"name": "paymentSessionData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field of the payment."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.cancelPayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.cancelPayment"
					}
				},
				{
					"id": 13364,
					"name": "initiatePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13365,
							"name": "initiatePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This methods sends a request to the third-party provider to initialize the payment. It's called when the payment session is created.\n\nFor example, in the Stripe provider, this method is used to create a Payment Intent for the customer."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Either the payment's data, which is stored in the "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field\nof the payment session, or an error object."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13366,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "CreatePaymentProviderSession"
										},
										"name": "CreatePaymentProviderSession",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderSessionResponse"
												},
												"name": "PaymentProviderSessionResponse",
												"package": "@medusajs/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.initiatePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.initiatePayment"
					}
				},
				{
					"id": 13367,
					"name": "deletePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13368,
							"name": "deletePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is called before a payment session is deleted. It's used to perform any actions necessary before the deletion."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Either an error object or an empty object."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13369,
									"name": "paymentSessionData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field of the Payment Session."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.deletePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.deletePayment"
					}
				},
				{
					"id": 13370,
					"name": "getPaymentStatus",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13371,
							"name": "getPaymentStatus",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to get the status of a payment or a payment session."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The status of the payment or payment session."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13372,
									"name": "paymentSessionData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field of a payment as a parameter. You can use this data to interact with the third-party provider to check the status of the payment if necessary."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/common.ts",
											"qualifiedName": "PaymentSessionStatus"
										},
										"name": "PaymentSessionStatus",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.getPaymentStatus"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.getPaymentStatus"
					}
				},
				{
					"id": 13373,
					"name": "refundPayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13374,
							"name": "refundPayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is called when a payment should be refunded. This is typically triggered manually by the merchant.\n\nIn this method, you can interact with the third-party provider and perform any actions necessary to refund the payment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Either an error object or an object that's stored in the "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field of the payment."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13375,
									"name": "paymentSessionData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field of a Payment."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 13376,
									"name": "refundAmount",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The amount to refund."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.refundPayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.refundPayment"
					}
				},
				{
					"id": 13377,
					"name": "retrievePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13378,
							"name": "retrievePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to provide a uniform way of retrieving the payment information from the third-party provider.\n\nFor example, in Stripeâ€™s payment provider this method is used to retrieve the payment intent details from Stripe."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Either an error object or the payment's data retrieved from a third-party provider."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13379,
									"name": "paymentSessionData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field of a payment session. Make sure to store in the "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " field any necessary data that would allow you to retrieve the payment data from the third-party provider."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.retrievePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.retrievePayment"
					}
				},
				{
					"id": 13380,
					"name": "updatePayment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13381,
							"name": "updatePayment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to update a payment associated with a session in the third-party provider."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Either the payment's data or an error object."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 13382,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data related to the update."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "UpdatePaymentProviderSession"
										},
										"name": "UpdatePaymentProviderSession",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderError"
												},
												"name": "PaymentProviderError",
												"package": "@medusajs/types"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
													"qualifiedName": "PaymentProviderSessionResponse"
												},
												"name": "PaymentProviderSessionResponse",
												"package": "@medusajs/types"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.updatePayment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.updatePayment"
					}
				},
				{
					"id": 13383,
					"name": "getWebhookActionAndData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 13384,
							"name": "getWebhookActionAndData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The method is called when a webhook event is received for this provider.\n\nThe method is responsible for normalizing the received event and inform the Payment Module of actions to perform, such as authorize or capture payment.\n\nLearn more about handling webhook events in [this guide](https://docs.medusajs.com/experimental/payment/webhook-events/)"
									}
								]
							},
							"parameters": [
								{
									"id": 13385,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The webhook event's details."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 13386,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 13387,
													"name": "data",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The parsed webhook body."
															}
														]
													},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Record"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "unknown"
															}
														],
														"name": "Record",
														"package": "typescript"
													}
												},
												{
													"id": 13388,
													"name": "rawData",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The raw webhook request body."
															}
														]
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
																	"qualifiedName": "__global.Buffer"
																},
																"name": "Buffer",
																"package": "@types/node",
																"qualifiedName": "__global.Buffer"
															}
														]
													}
												},
												{
													"id": 13389,
													"name": "headers",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The headers of the webhook request."
															}
														]
													},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Record"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "unknown"
															}
														],
														"name": "Record",
														"package": "typescript"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														13387,
														13388,
														13389
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
											"qualifiedName": "WebhookActionResult"
										},
										"name": "WebhookActionResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IPaymentProvider.getWebhookActionAndData"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IPaymentProvider.getWebhookActionAndData"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						13342
					]
				},
				{
					"title": "Properties",
					"children": [
						13347,
						13348,
						13341
					]
				},
				{
					"title": "Methods",
					"children": [
						13351,
						13354,
						13361,
						13364,
						13367,
						13370,
						13373,
						13377,
						13380,
						13383
					]
				}
			],
			"typeParameters": [
				{
					"id": 13390,
					"name": "TConfig",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {},
					"default": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../../packages/core/types/src/payment/provider.ts",
						"qualifiedName": "IPaymentProvider"
					},
					"name": "IPaymentProvider",
					"package": "@medusajs/types"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				13336
			]
		}
	],
	"packageName": "@medusajs/utils",
	"symbolIdMap": {
		"13332": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": ""
		},
		"13336": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider"
		},
		"13341": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.identifier"
		},
		"13342": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.__constructor"
		},
		"13343": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider"
		},
		"13344": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.TConfig"
		},
		"13345": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "container"
		},
		"13346": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "config"
		},
		"13347": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.container"
		},
		"13348": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.config"
		},
		"13351": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.capturePayment"
		},
		"13352": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.capturePayment"
		},
		"13353": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "paymentSessionData"
		},
		"13354": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.authorizePayment"
		},
		"13355": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.authorizePayment"
		},
		"13356": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "paymentSessionData"
		},
		"13357": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "context"
		},
		"13358": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "__type"
		},
		"13359": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "__type.status"
		},
		"13360": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "__type.data"
		},
		"13361": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.cancelPayment"
		},
		"13362": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.cancelPayment"
		},
		"13363": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "paymentSessionData"
		},
		"13364": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.initiatePayment"
		},
		"13365": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.initiatePayment"
		},
		"13366": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "context"
		},
		"13367": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.deletePayment"
		},
		"13368": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.deletePayment"
		},
		"13369": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "paymentSessionData"
		},
		"13370": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.getPaymentStatus"
		},
		"13371": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.getPaymentStatus"
		},
		"13372": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "paymentSessionData"
		},
		"13373": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.refundPayment"
		},
		"13374": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.refundPayment"
		},
		"13375": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "paymentSessionData"
		},
		"13376": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "refundAmount"
		},
		"13377": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.retrievePayment"
		},
		"13378": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.retrievePayment"
		},
		"13379": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "paymentSessionData"
		},
		"13380": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.updatePayment"
		},
		"13381": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.updatePayment"
		},
		"13382": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "context"
		},
		"13383": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.getWebhookActionAndData"
		},
		"13384": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.getWebhookActionAndData"
		},
		"13385": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "data"
		},
		"13386": {
			"sourceFileName": "../../../../packages/core/types/src/payment/mutations.ts",
			"qualifiedName": "__type"
		},
		"13387": {
			"sourceFileName": "../../../../packages/core/types/src/payment/mutations.ts",
			"qualifiedName": "__type.data"
		},
		"13388": {
			"sourceFileName": "../../../../packages/core/types/src/payment/mutations.ts",
			"qualifiedName": "__type.rawData"
		},
		"13389": {
			"sourceFileName": "../../../../packages/core/types/src/payment/mutations.ts",
			"qualifiedName": "__type.headers"
		},
		"13390": {
			"sourceFileName": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts",
			"qualifiedName": "AbstractPaymentProvider.TConfig"
		}
	},
	"files": {
		"entries": {
			"1": "../../../../packages/core/utils/src/payment/abstract-payment-provider.ts"
		},
		"reflections": {
			"1": 13332
		}
	}
}