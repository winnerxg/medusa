{
	"id": 12941,
	"name": "auth-provider",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 12942,
			"name": "AbstractAuthModuleProvider",
			"variant": "declaration",
			"kind": 128,
			"flags": {
				"isAbstract": true
			},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "### constructor\n\nThe constructor allows you to access resources from the module's container using the first parameter,\nand the module's options using the second parameter.\n\nIf you're creating a client or establishing a connection with a third-party service, do it in the constructor.\n\nIn the constructor, you must pass to the parent constructor two parameters:\n\n1. The first one is an empty object.\n2. The second is an object having two properties:\n   - "
					},
					{
						"kind": "code",
						"text": "`provider`"
					},
					{
						"kind": "text",
						"text": ": The ID of the provider. For example, "
					},
					{
						"kind": "code",
						"text": "`emailpass`"
					},
					{
						"kind": "text",
						"text": ".\n   - "
					},
					{
						"kind": "code",
						"text": "`displayName`"
					},
					{
						"kind": "text",
						"text": ": The label or displayable name of the provider. For example, "
					},
					{
						"kind": "code",
						"text": "`Email and Password Authentication`"
					},
					{
						"kind": "text",
						"text": ".\n\n#### Example\n\n"
					},
					{
						"kind": "code",
						"text": "```ts\nimport { AbstractAuthModuleProvider } from \"@medusajs/utils\"\nimport { Logger } from \"@medusajs/types\"\n\ntype InjectedDependencies = {\n  logger: Logger\n}\n\ntype Options = {\n  apiKey: string\n}\n\nclass MyAuthProviderService extends AbstractAuthModuleProvider {\n  protected logger_: Logger\n  protected options_: Options\n  // assuming you're initializing a client\n  protected client\n\n  constructor (\n    { logger }: InjectedDependencies,\n    options: Options\n  ) {\n    super(\n      {},\n      {\n        provider: \"my-auth\",\n        displayName: \"My Custom Authentication\"\n      }\n    )\n\n    this.logger_ = logger\n    this.options_ = options\n\n    // assuming you're initializing a client\n    this.client = new Client(options)\n  }\n\n  // ...\n}\n\nexport default MyAuthProviderService\n```"
					}
				]
			},
			"children": [
				{
					"id": 12958,
					"name": "authenticate",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isAbstract": true
					},
					"signatures": [
						{
							"id": 12959,
							"name": "authenticate",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method authenticates the user.\n\nThe authentication happens either by directly authenticating or returning a redirect URL to continue \nthe authentication with a third party provider."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The authentication response."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "For example, if your authentication provider doesn't require validating a callback:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport { \n  AuthIdentityProviderService, \n  AuthenticationInput, \n  AuthenticationResponse\n} from \"@medusajs/types\"\n// ...\n\nclass MyAuthProviderService extends AbstractAuthModuleProvider {\n  // ...\n  async authenticate(\n    data: AuthenticationInput, \n    authIdentityProviderService: AuthIdentityProviderService\n  ): Promise<AuthenticationResponse> {\n    const isAuthenticated = false\n    // TODO perform custom logic to authenticate the user\n    // ...\n    \n    if (!isAuthenticated) {\n      // if the authentication didn't succeed, return\n      // an object of the following format\n      return {\n        success: false,\n        error: \"Incorrect credentials\"\n      }\n    }\n\n    // authentication is successful, create an auth identity\n    // if doesn't exist\n    let authIdentity\n\n    try {\n      authIdentity = await authIdentityProviderService.retrieve({\n        entity_id: data.body.email, // email or some ID\n        provider: this.provider\n      })\n    } catch (e) {\n      // The auth identity doesn't exist so create it\n      authIdentity = await authIdentityProviderService.create({\n        entity_id: data.body.email, // email or some ID\n        provider: this.provider,\n        provider_metadata: {\n          // can include password or any other relevant information\n        }\n      })\n    }\n\n    return {\n      success: true,\n      authIdentity\n    }\n  }\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nIf your authentication provider requires validating callback:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport { \n  AuthIdentityProviderService, \n  AuthenticationInput, \n  AuthenticationResponse\n} from \"@medusajs/types\"\n// ...\n\nclass MyAuthProviderService extends AbstractAuthModuleProvider {\n  // ...\n  async authenticate(\n    data: AuthenticationInput, \n    authIdentityProviderService: AuthIdentityProviderService\n  ): Promise<AuthenticationResponse> {\n    const isAuthenticated = false\n    // TODO perform custom logic to authenticate the user\n    // ...\n    \n    if (!isAuthenticated) {\n      // if the authentication didn't succeed, return\n      // an object of the following format\n      return {\n        success: false,\n        error: \"Incorrect credentials\"\n      }\n    }\n\n    return {\n      success: true,\n      location: \"some-url.com\"\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12960,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the authentication request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/common/provider.ts",
											"qualifiedName": "AuthenticationInput"
										},
										"name": "AuthenticationInput",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 12961,
									"name": "authIdentityProviderService",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The service used to retrieve or \ncreate an auth identity. It has two methods: "
											},
											{
												"kind": "code",
												"text": "`create`"
											},
											{
												"kind": "text",
												"text": " to create an auth identity,\nand "
											},
											{
												"kind": "code",
												"text": "`retrieve`"
											},
											{
												"kind": "text",
												"text": " to retrieve an auth identity. When you authenticate the user, you can create an auth identity\nusing this service."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/provider.ts",
											"qualifiedName": "AuthIdentityProviderService"
										},
										"name": "AuthIdentityProviderService",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/common/provider.ts",
											"qualifiedName": "AuthenticationResponse"
										},
										"name": "AuthenticationResponse",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IAuthProvider.authenticate"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IAuthProvider.authenticate"
					}
				},
				{
					"id": 12962,
					"name": "validateCallback",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 12963,
							"name": "validateCallback",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method validates the callback of an authentication request.\n\nIn an authentication flow that requires performing an action with a third-party service, such as login\nwith a social account, the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "authenticate",
										"target": 12958,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " method is called first.\n\nThen, the third-party service redirects to the Medusa application's validate callback API route. \nThat route uses this method to authenticate the user."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The authentication response."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { \n  AuthIdentityProviderService, \n  AuthenticationInput, \n  AuthenticationResponse\n} from \"@medusajs/types\"\n// ...\n\nclass MyAuthProviderService extends AbstractAuthModuleProvider {\n  // ...\n  async validateCallback(\n    data: AuthenticationInput, \n    authIdentityProviderService: AuthIdentityProviderService\n  ): Promise<AuthenticationResponse> {\n    const isAuthenticated = false\n    // TODO perform custom logic to authenticate the user\n    // ...\n\n    if (!isAuthenticated) {\n      // if the authentication didn't succeed, return\n      // an object of the following format\n      return {\n        success: false,\n        error: \"Something went wrong\"\n      }\n    }\n\n    // authentication is successful, create an auth identity\n    // if doesn't exist\n    let authIdentity\n\n    try {\n      authIdentity = await authIdentityProviderService.retrieve({\n        entity_id: data.body.email, // email or some ID\n        provider: this.provider\n      })\n    } catch (e) {\n      // The auth identity doesn't exist so create it\n      authIdentity = await authIdentityProviderService.create({\n        entity_id: data.body.email, // email or some ID\n        provider: this.provider,\n        provider_metadata: {\n          // can include password or any other relevant information\n        }\n      })\n    }\n\n    return {\n      success: true,\n      authIdentity\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 12964,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the authentication request."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/common/provider.ts",
											"qualifiedName": "AuthenticationInput"
										},
										"name": "AuthenticationInput",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 12965,
									"name": "authIdentityProviderService",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The service used to retrieve or \ncreate an auth identity. It has two methods: "
											},
											{
												"kind": "code",
												"text": "`create`"
											},
											{
												"kind": "text",
												"text": " to create an auth identity,\nand "
											},
											{
												"kind": "code",
												"text": "`retrieve`"
											},
											{
												"kind": "text",
												"text": " to retrieve an auth identity. When you authenticate the user, you can create an auth identity\nusing this service."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/provider.ts",
											"qualifiedName": "AuthIdentityProviderService"
										},
										"name": "AuthIdentityProviderService",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/auth/common/provider.ts",
											"qualifiedName": "AuthenticationResponse"
										},
										"name": "AuthenticationResponse",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IAuthProvider.validateCallback"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IAuthProvider.validateCallback"
					}
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						12958,
						12962
					]
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../../packages/core/types/src/auth/provider.ts",
						"qualifiedName": "IAuthProvider"
					},
					"name": "IAuthProvider",
					"package": "@medusajs/types"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				12942
			]
		}
	],
	"packageName": "@medusajs/utils",
	"symbolIdMap": {
		"12941": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": ""
		},
		"12942": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider"
		},
		"12958": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.authenticate"
		},
		"12959": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.authenticate"
		},
		"12960": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "data"
		},
		"12961": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "authIdentityProviderService"
		},
		"12962": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.validateCallback"
		},
		"12963": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "AbstractAuthModuleProvider.validateCallback"
		},
		"12964": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "data"
		},
		"12965": {
			"sourceFileName": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts",
			"qualifiedName": "authIdentityProviderService"
		}
	},
	"files": {
		"entries": {
			"1": "../../../../packages/core/utils/src/auth/abstract-auth-provider.ts"
		},
		"reflections": {
			"1": 12941
		}
	}
}